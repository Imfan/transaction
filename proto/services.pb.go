// Code generated by protoc-gen-go. DO NOT EDIT.
// Simplified implementation for demo purposes

package proto

import (
	"context"
	"google.golang.org/grpc"
)

// User Service Messages
type GetUserRequest struct {
	UserId string `json:"user_id"`
}

type GetUserResponse struct {
	UserId    string `json:"user_id"`
	Name      string `json:"name"`
	Email     string `json:"email"`
	Age       int32  `json:"age"`
	CreatedAt string `json:"created_at"`
}

type CreateUserRequest struct {
	Name  string `json:"name"`
	Email string `json:"email"`
	Age   int32  `json:"age"`
}

type CreateUserResponse struct {
	UserId  string `json:"user_id"`
	Message string `json:"message"`
}

// Order Service Messages
type GetOrderRequest struct {
	OrderId string `json:"order_id"`
}

type GetOrderResponse struct {
	OrderId     string      `json:"order_id"`
	UserId      string      `json:"user_id"`
	Items       []OrderItem `json:"items"`
	TotalAmount float64     `json:"total_amount"`
	Status      string      `json:"status"`
	CreatedAt   string      `json:"created_at"`
}

type CreateOrderRequest struct {
	UserId string      `json:"user_id"`
	Items  []OrderItem `json:"items"`
}

type CreateOrderResponse struct {
	OrderId string `json:"order_id"`
	Message string `json:"message"`
}

type ListOrdersRequest struct {
	UserId string `json:"user_id"`
	Limit  int32  `json:"limit"`
}

type ListOrdersResponse struct {
	Orders []GetOrderResponse `json:"orders"`
}

type OrderItem struct {
	ProductId   string  `json:"product_id"`
	ProductName string  `json:"product_name"`
	Quantity    int32   `json:"quantity"`
	Price       float64 `json:"price"`
}

// Payment Service Messages
type ProcessPaymentRequest struct {
	OrderId       string  `json:"order_id"`
	UserId        string  `json:"user_id"`
	Amount        float64 `json:"amount"`
	PaymentMethod string  `json:"payment_method"`
}

type ProcessPaymentResponse struct {
	PaymentId     string `json:"payment_id"`
	Status        string `json:"status"`
	Message       string `json:"message"`
	TransactionId string `json:"transaction_id"`
}

type GetPaymentRequest struct {
	PaymentId string `json:"payment_id"`
}

type GetPaymentResponse struct {
	PaymentId string  `json:"payment_id"`
	OrderId   string  `json:"order_id"`
	UserId    string  `json:"user_id"`
	Amount    float64 `json:"amount"`
	Status    string  `json:"status"`
	CreatedAt string  `json:"created_at"`
}

type RefundPaymentRequest struct {
	PaymentId string  `json:"payment_id"`
	Amount    float64 `json:"amount"`
	Reason    string  `json:"reason"`
}

type RefundPaymentResponse struct {
	RefundId string `json:"refund_id"`
	Status   string `json:"status"`
	Message  string `json:"message"`
}

// Service Interfaces (normally generated by protoc)
type UserServiceServer interface {
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
}

type OrderServiceServer interface {
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
}

type PaymentServiceServer interface {
	ProcessPayment(context.Context, *ProcessPaymentRequest) (*ProcessPaymentResponse, error)
	GetPayment(context.Context, *GetPaymentRequest) (*GetPaymentResponse, error)
	RefundPayment(context.Context, *RefundPaymentRequest) (*RefundPaymentResponse, error)
}

// Client Interfaces
type UserServiceClient interface {
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
}

type OrderServiceClient interface {
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
}

type PaymentServiceClient interface {
	ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error)
	GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error)
	RefundPayment(ctx context.Context, in *RefundPaymentRequest, opts ...grpc.CallOption) (*RefundPaymentResponse, error)
}

// Client constructors
func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

// Simple client implementations (normally generated)
type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/services.UserService/GetUser", in, out, opts...)
	return out, err
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/services.UserService/CreateUser", in, out, opts...)
	return out, err
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func (c *orderServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, "/services.OrderService/GetOrder", in, out, opts...)
	return out, err
}

func (c *orderServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, "/services.OrderService/CreateOrder", in, out, opts...)
	return out, err
}

func (c *orderServiceClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, "/services.OrderService/ListOrders", in, out, opts...)
	return out, err
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func (c *paymentServiceClient) ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error) {
	out := new(ProcessPaymentResponse)
	err := c.cc.Invoke(ctx, "/services.PaymentService/ProcessPayment", in, out, opts...)
	return out, err
}

func (c *paymentServiceClient) GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error) {
	out := new(GetPaymentResponse)
	err := c.cc.Invoke(ctx, "/services.PaymentService/GetPayment", in, out, opts...)
	return out, err
}

func (c *paymentServiceClient) RefundPayment(ctx context.Context, in *RefundPaymentRequest, opts ...grpc.CallOption) (*RefundPaymentResponse, error) {
	out := new(RefundPaymentResponse)
	err := c.cc.Invoke(ctx, "/services.PaymentService/RefundPayment", in, out, opts...)
	return out, err
} 